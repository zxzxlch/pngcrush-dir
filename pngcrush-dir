#!/bin/bash
#
# pngcrush-dir compresses a directory of PNG files and writes them to the output
# path with the same directory structure.
#
# ARG_HELP([Compress a directory of PNG files and move them to the output path with the same directory structure.])
# ARG_POSITIONAL_SINGLE([in_dir],[The directory containing PNG files to process.])
# ARG_POSITIONAL_SINGLE([out_dir],[The output directory.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die() {
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option() {
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS

print_help() {
	printf '%s\n' "Compress a directory of PNG files and move them to the output path with the same directory structure."
	printf 'Usage: %s [-h|--help] <in_dir> <out_dir>\n' "$0"
	printf '\t%s\n' "<in_dir>: The directory containing PNG files to process."
	printf '\t%s\n' "<out_dir>: The output directory."
	printf '\t%s\n' "-h, --help: Prints help"
}

parse_commandline() {
	_positionals_count=0
	while test $# -gt 0; do
		_key="$1"
		case "$_key" in
		-h | --help)
			print_help
			exit 0
			;;
		-h*)
			print_help
			exit 0
			;;
		*)
			_last_positional="$1"
			_positionals+=("$_last_positional")
			_positionals_count=$((_positionals_count + 1))
			;;
		esac
		shift
	done
}

handle_passed_args_count() {
	local _required_args_string="'in_dir' and 'out_dir'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}

assign_positional_args() {
	local _positional_name _shift_for=$1
	_positional_names="_arg_in_dir _arg_out_dir "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}; do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

# Check for valid paths
if [ -z "$_arg_in_dir" ]; then
	_arg_in_dir=./
fi

if [ ! -d "$_arg_in_dir" ]; then
	echo "Invalid path: $_arg_in_dir"
	exit 1
fi

if [ -z "$_arg_out_dir" ]; then
	_arg_out_dir=./
fi

# Create out directory if it doesn't exist
if ( ! (mkdir -p "$_arg_out_dir")); then
	echo "Invalid path: $_arg_out_dir"
	exit 1
fi

# Get absolute path
outdir=$(
	cd "$_arg_out_dir"
	pwd
)

cd "$_arg_in_dir"

# Process screenshots
find . -iname '*.png' -print | while read f; do
	filename="${f/#.\//}"
	dest="$outdir/$filename"

	# Create directory if it doesn't exist
	mkdir -p "${dest%\/*}"

	if (pngcrush -reduce "$f" "$dest"); then
		mv "$f" ~/.Trash/
		echo "Successfully processed $f"
	else
		echo "Error: Can't process $f"
	fi
done

# ] <-- needed because of Argbash
